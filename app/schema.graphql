
type Query{
    GetUser(username:String!,password:String!):LoginData

    # periods
    GetAllPeriods:[Period]
    GetPeriodById(period_id:Int!):Period

    # leader
    GetLeaderById(id:Int!):Leader
    GetLeaderByPeriodId(period_id:Int!):[Leader]
    GetLeaderByInitialAndPeriodId(initial:String!, period_id:Int!):Leader

    # assistant
    GetAllAssistant:[Assistant]
    GetAssistantById(id:Int!):Assistant
    GetAssistantByPeriodId(period_id:Int!):[Assistant]

    # holiday
    GetHolidayByPeriodId(period_id:Int!):[Holiday]

    #shift
    GetAssistantShifts(assistant_id:Int!):[Shift]

    #special shift
    GetSpecialShiftByPeriodId(period_id:Int!):[SpecialShift]

    #attendance
    GetAllAttendanceByDate(start_date:String!, end_date:String!, assistant_id:Int!):[Report]
    GetAttendanceSummary(assistant_id:Int!, period_id:Int!, leader_id:Int!, start_date:String, end_date:String):SummaryReport

}

type Mutation{
    #period
    InsertPeriod(description:String!, start:String!, end:String!):Boolean
    UpdatePeriod(id: Int!, description:String!, start:String!, end:String!):Boolean
    DeletePeriod(id: Int!):Boolean

    #leader
    InsertLeader(period_id:Int!, initial:String!, name:String!):String
    UpdateLeader(id:Int!, period_id:Int!, initial:String!, name:String!):String
    DeleteLeader(id:Int!):Boolean

    #assistant
    InsertAssistant(period_id:Int!, leader_id:Int!, initial:String!, name:String!):String
    InsertAssistantByLeaderInitial(period_id:Int!, leader_initial:String!, initial:String!, name:String!):String
    UpdateAssistant(id:Int!,period_id:Int! leader_id:Int!, initial:String!, name:String!):String
    DeleteAssistant(id: Int!):Boolean

    #holiday
    InsertHoliday(period_id:Int!, description:String!, date:String!):String
    UpdateHoliday(id:Int!, description:String!, date:String!):String
    DeleteHoliday(id:Int!):Boolean

    #Shift
    InsertShift(assistant_id:Int!, day:Int!, _in:String!, _out:String!):Boolean
    InsertShiftByAssistantInitial(assistant_initial:String!, day:Int!, _in:String!, _out:String!):String
    UpdateShift(id:Int!, assistant_id:Int!, day:Int!, _in:String!, _out:String!):Boolean
    DeleteShift(id:Int!):Boolean
    DeleteAllAssistantShifts(assistant_id:Int!):Boolean

    #Special Shift
    InsertSpecialShift(period_id:Int!, description:String!, assistant_ids:String!, date:String!, _in:String!, _out:String!):String
    UpdateSpecialShift(id:Int!, period_id:Int!, description:String!, assistant_ids:String!, date:String!, _in:String!, _out:String!):String
    DeleteSpecialShift(id:Int!):String

    #attendance
    InsertAttendance(assistant_initial:String!, period_id:Int!, date:String!, _in:String!, _out:String!):String
    UpdateAttendance(id:Int!, in_permission:String, out_permission:String, special_permission:String,
           in_permission_description:String,
           out_permission_description:String, special_permission_description:String):String
}
type SummaryReport{
    leader: String
    assistant:String

}
type Attendance{
    id:Int
    assistant_id : Int
    date: String
    _in : String
    _out: String
    in_permission:String
    out_permission:String
    special_permission:String
    in_permission_description:String
    out_permission_description:String
    special_permission_description:String
    assistant:Assistant
}
type Report{
    attendance:Attendance
    special_shift: [SpecialShift]
}

type Shift {
    id : Int
    assistant: Assistant
    day : Int
    _in : String
    _out : String

}

type Assistant{
    id: Int
    period: Period
    leader: Leader
    initial: String
    name: String
    shift:[Shift]
}

type Leader{
    id: Int
    period: Period
    initial: String
    name: String
}

type User{
    Major:String
    Name:String
    Role:String
    UserId:String
    UserName:String
}
type Period{
    id: Int
    description: String
    start: String
    end: String
}
type SpecialShift{
    id : Int
    period: Period
    description : String
    assistant_ids: String
    date : String
    _in : String
    _out : String
}

type LoginData{
    UserData: User
    Token: String
}
type Holiday{
    id: Int
    period: Period
    description: String
    date: String
}
